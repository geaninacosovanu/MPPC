using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


    // Generated by the protocol buffer compiler.  DO NOT EDIT!
    // source: .proto
#pragma warning disable 1591, 0612, 3021
    #region Designer generated code

    using pb = global::Google.Protobuf;
    using pbc = global::Google.Protobuf.Collections;
    using pbr = global::Google.Protobuf.Reflection;
    using scg = global::System.Collections.Generic;
    /// <summary>Holder for reflection information generated from .proto</summary>
    public static partial class Reflection
    {

        #region Descriptor
        /// <summary>File descriptor for .proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static Reflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "CgYucHJvdG8iKgoEVXNlchIQCgh1c2VybmFtZRgBIAEoCRIQCghwYXNzd29y",
                  "ZBgCIAEoCSJVCgxJbnNjcmllcmVEVE8SDAoEbnVtZRgBIAEoCRIOCgZ2YXJz",
                  "dGEYAiABKAUSFQoFcHJvYmUYAyADKAsyBi5Qcm9iYRIQCghleGlzdGVudBgE",
                  "IAEoCCIzCgVQcm9iYRIKCgJpZBgBIAEoBRIMCgRudW1lGAIgASgJEhAKCGRp",
                  "c3RhbnRhGAMgASgCIjQKFFBhcnRpY2lwYW50SW5zY3JpZXJlEgwKBG51bWUY",
                  "ASABKAkSDgoGdmFyc3RhGAIgASgFIjkKCFByb2JhRFRPEhUKBXByb2JhGAEg",
                  "ASgLMgYuUHJvYmESFgoObnJQYXJ0aWNpcGFudGkYAiABKAUiTwoTUGFydGlj",
                  "aXBhbnRQcm9iZURUTxIhCgtwYXJ0aWNpcGFudBgBIAEoCzIMLlBhcnRpY2lw",
                  "YW50EhUKBXByb2JlGAIgAygLMgYuUHJvYmEiNwoLUGFydGljaXBhbnQSCgoC",
                  "aWQYASABKAkSDAoEbnVtZRgCIAEoCRIOCgZ2YXJzdGEYAyABKAUiswIKEElu",
                  "c2NyaWVyZVJlcXVlc3QSJAoEdHlwZRgBIAEoDjIWLkluc2NyaWVyZVJlcXVl",
                  "c3QuVHlwZRIVCgR1c2VyGAIgASgLMgUuVXNlckgAEiIKCWluc2NyaWVyZRgD",
                  "IAEoCzINLkluc2NyaWVyZURUT0gAEhEKB2lkUHJvYmEYBCABKAVIABIjCgtw",
                  "YXJ0aWNpcGFudBgFIAEoCzIMLlBhcnRpY2lwYW50SAAiewoEVHlwZRIKCgZV",
                  "bmtvd24QABIJCgVMb2dpbhABEgoKBkxvZ291dBACEhAKDEFkZEluc2NyaWVy",
                  "ZRADEhIKDkdldEFsbFByb2JlRHRvEAQSFgoSR2V0UGFydGljaXBhbnRpRHRv",
                  "EAUSEgoOR2V0UGFydGljaXBhbnQQBkIJCgdwYXlsb2FkIsYCChFJbnNjcmll",
                  "cmVSZXNwb25zZRIlCgR0eXBlGAEgASgOMhcuSW5zY3JpZXJlUmVzcG9uc2Uu",
                  "VHlwZRINCgVlcnJvchgCIAEoCRIbCghwcm9iZUR0bxgDIAMoCzIJLlByb2Jh",
                  "RFRPEjEKE3BhcnRpY2lwYW50UHJvYmVEdG8YBCADKAsyFC5QYXJ0aWNpcGFu",
                  "dFByb2JlRFRPEg4KBmV4aXN0cxgFIAEoCBIhCgtwYXJ0aWNpcGFudBgGIAEo",
                  "CzIMLlBhcnRpY2lwYW50IngKBFR5cGUSCwoHVW5rbm93bhAAEgYKAk9rEAES",
                  "CQoFRXJyb3IQAhISCg5HZXRBbGxQcm9iZUR0bxADEhYKEkdldFBhcnRpY2lw",
                  "YW50aUR0bxAEEhIKDkdldFBhcnRpY2lwYW50EAUSEAoMTmV3SW5zY3JpZXJl",
                  "EAZiBnByb3RvMw=="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::User), global::User.Parser, new[]{ "Username", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InscriereDTO), global::InscriereDTO.Parser, new[]{ "Nume", "Varsta", "Probe", "Existent" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Proba), global::Proba.Parser, new[]{ "Id", "Nume", "Distanta" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ParticipantInscriere), global::ParticipantInscriere.Parser, new[]{ "Nume", "Varsta" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProbaDTO), global::ProbaDTO.Parser, new[]{ "Proba", "NrParticipanti" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ParticipantProbeDTO), global::ParticipantProbeDTO.Parser, new[]{ "Participant", "Probe" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Participant), global::Participant.Parser, new[]{ "Id", "Nume", "Varsta" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InscriereRequest), global::InscriereRequest.Parser, new[]{ "Type", "User", "Inscriere", "IdProba", "Participant" }, new[]{ "Payload" }, new[]{ typeof(global::InscriereRequest.Types.Type) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::InscriereResponse), global::InscriereResponse.Parser, new[]{ "Type", "Error", "ProbeDto", "ParticipantProbeDto", "Exists", "Participant" }, null, new[]{ typeof(global::InscriereResponse.Types.Type) }, null)
                }));
        }
        #endregion

    }
    #region Messages
    public sealed partial class User : pb::IMessage<User>
    {
        private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<User> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Reflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User(User other) : this()
        {
            username_ = other.username_;
            password_ = other.password_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public User Clone()
        {
            return new User(this);
        }

        /// <summary>Field number for the "username" field.</summary>
        public const int UsernameFieldNumber = 1;
        private string username_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Username
        {
            get { return username_; }
            set
            {
                username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "password" field.</summary>
        public const int PasswordFieldNumber = 2;
        private string password_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password
        {
            get { return password_; }
            set
            {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as User);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(User other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Username != other.Username) return false;
            if (Password != other.Password) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Username.Length != 0) hash ^= Username.GetHashCode();
            if (Password.Length != 0) hash ^= Password.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Username.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Username);
            }
            if (Password.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Password);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Username.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
            }
            if (Password.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(User other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Username.Length != 0)
            {
                Username = other.Username;
            }
            if (other.Password.Length != 0)
            {
                Password = other.Password;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Username = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Password = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class InscriereDTO : pb::IMessage<InscriereDTO>
    {
        private static readonly pb::MessageParser<InscriereDTO> _parser = new pb::MessageParser<InscriereDTO>(() => new InscriereDTO());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InscriereDTO> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Reflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InscriereDTO()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InscriereDTO(InscriereDTO other) : this()
        {
            nume_ = other.nume_;
            varsta_ = other.varsta_;
            probe_ = other.probe_.Clone();
            existent_ = other.existent_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InscriereDTO Clone()
        {
            return new InscriereDTO(this);
        }

        /// <summary>Field number for the "nume" field.</summary>
        public const int NumeFieldNumber = 1;
        private string nume_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nume
        {
            get { return nume_; }
            set
            {
                nume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "varsta" field.</summary>
        public const int VarstaFieldNumber = 2;
        private int varsta_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Varsta
        {
            get { return varsta_; }
            set
            {
                varsta_ = value;
            }
        }

        /// <summary>Field number for the "probe" field.</summary>
        public const int ProbeFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Proba> _repeated_probe_codec
            = pb::FieldCodec.ForMessage(26, global::Proba.Parser);
        private readonly pbc::RepeatedField<global::Proba> probe_ = new pbc::RepeatedField<global::Proba>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proba> Probe
        {
            get { return probe_; }
        }

        /// <summary>Field number for the "existent" field.</summary>
        public const int ExistentFieldNumber = 4;
        private bool existent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Existent
        {
            get { return existent_; }
            set
            {
                existent_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InscriereDTO);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InscriereDTO other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Nume != other.Nume) return false;
            if (Varsta != other.Varsta) return false;
            if (!probe_.Equals(other.probe_)) return false;
            if (Existent != other.Existent) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Nume.Length != 0) hash ^= Nume.GetHashCode();
            if (Varsta != 0) hash ^= Varsta.GetHashCode();
            hash ^= probe_.GetHashCode();
            if (Existent != false) hash ^= Existent.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Nume.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Nume);
            }
            if (Varsta != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Varsta);
            }
            probe_.WriteTo(output, _repeated_probe_codec);
            if (Existent != false)
            {
                output.WriteRawTag(32);
                output.WriteBool(Existent);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Nume.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Nume);
            }
            if (Varsta != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Varsta);
            }
            size += probe_.CalculateSize(_repeated_probe_codec);
            if (Existent != false)
            {
                size += 1 + 1;
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InscriereDTO other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Nume.Length != 0)
            {
                Nume = other.Nume;
            }
            if (other.Varsta != 0)
            {
                Varsta = other.Varsta;
            }
            probe_.Add(other.probe_);
            if (other.Existent != false)
            {
                Existent = other.Existent;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Nume = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            Varsta = input.ReadInt32();
                            break;
                        }
                    case 26:
                        {
                            probe_.AddEntriesFrom(input, _repeated_probe_codec);
                            break;
                        }
                    case 32:
                        {
                            Existent = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Proba : pb::IMessage<Proba>
    {
        private static readonly pb::MessageParser<Proba> _parser = new pb::MessageParser<Proba>(() => new Proba());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Proba> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Reflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Proba()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Proba(Proba other) : this()
        {
            id_ = other.id_;
            nume_ = other.nume_;
            distanta_ = other.distanta_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Proba Clone()
        {
            return new Proba(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id
        {
            get { return id_; }
            set
            {
                id_ = value;
            }
        }

        /// <summary>Field number for the "nume" field.</summary>
        public const int NumeFieldNumber = 2;
        private string nume_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nume
        {
            get { return nume_; }
            set
            {
                nume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "distanta" field.</summary>
        public const int DistantaFieldNumber = 3;
        private float distanta_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Distanta
        {
            get { return distanta_; }
            set
            {
                distanta_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Proba);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Proba other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (Nume != other.Nume) return false;
            if (Distanta != other.Distanta) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id != 0) hash ^= Id.GetHashCode();
            if (Nume.Length != 0) hash ^= Nume.GetHashCode();
            if (Distanta != 0F) hash ^= Distanta.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(Id);
            }
            if (Nume.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Nume);
            }
            if (Distanta != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(Distanta);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Id != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
            }
            if (Nume.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Nume);
            }
            if (Distanta != 0F)
            {
                size += 1 + 4;
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Proba other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id != 0)
            {
                Id = other.Id;
            }
            if (other.Nume.Length != 0)
            {
                Nume = other.Nume;
            }
            if (other.Distanta != 0F)
            {
                Distanta = other.Distanta;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            Id = input.ReadInt32();
                            break;
                        }
                    case 18:
                        {
                            Nume = input.ReadString();
                            break;
                        }
                    case 29:
                        {
                            Distanta = input.ReadFloat();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ParticipantInscriere : pb::IMessage<ParticipantInscriere>
    {
        private static readonly pb::MessageParser<ParticipantInscriere> _parser = new pb::MessageParser<ParticipantInscriere>(() => new ParticipantInscriere());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ParticipantInscriere> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Reflection.Descriptor.MessageTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParticipantInscriere()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParticipantInscriere(ParticipantInscriere other) : this()
        {
            nume_ = other.nume_;
            varsta_ = other.varsta_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParticipantInscriere Clone()
        {
            return new ParticipantInscriere(this);
        }

        /// <summary>Field number for the "nume" field.</summary>
        public const int NumeFieldNumber = 1;
        private string nume_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nume
        {
            get { return nume_; }
            set
            {
                nume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "varsta" field.</summary>
        public const int VarstaFieldNumber = 2;
        private int varsta_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Varsta
        {
            get { return varsta_; }
            set
            {
                varsta_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ParticipantInscriere);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ParticipantInscriere other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Nume != other.Nume) return false;
            if (Varsta != other.Varsta) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Nume.Length != 0) hash ^= Nume.GetHashCode();
            if (Varsta != 0) hash ^= Varsta.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Nume.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Nume);
            }
            if (Varsta != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(Varsta);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Nume.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Nume);
            }
            if (Varsta != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Varsta);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ParticipantInscriere other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Nume.Length != 0)
            {
                Nume = other.Nume;
            }
            if (other.Varsta != 0)
            {
                Varsta = other.Varsta;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Nume = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            Varsta = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ProbaDTO : pb::IMessage<ProbaDTO>
    {
        private static readonly pb::MessageParser<ProbaDTO> _parser = new pb::MessageParser<ProbaDTO>(() => new ProbaDTO());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ProbaDTO> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Reflection.Descriptor.MessageTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProbaDTO()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProbaDTO(ProbaDTO other) : this()
        {
            Proba = other.proba_ != null ? other.Proba.Clone() : null;
            nrParticipanti_ = other.nrParticipanti_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ProbaDTO Clone()
        {
            return new ProbaDTO(this);
        }

        /// <summary>Field number for the "proba" field.</summary>
        public const int ProbaFieldNumber = 1;
        private global::Proba proba_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Proba Proba
        {
            get { return proba_; }
            set
            {
                proba_ = value;
            }
        }

        /// <summary>Field number for the "nrParticipanti" field.</summary>
        public const int NrParticipantiFieldNumber = 2;
        private int nrParticipanti_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int NrParticipanti
        {
            get { return nrParticipanti_; }
            set
            {
                nrParticipanti_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ProbaDTO);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ProbaDTO other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Proba, other.Proba)) return false;
            if (NrParticipanti != other.NrParticipanti) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (proba_ != null) hash ^= Proba.GetHashCode();
            if (NrParticipanti != 0) hash ^= NrParticipanti.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (proba_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Proba);
            }
            if (NrParticipanti != 0)
            {
                output.WriteRawTag(16);
                output.WriteInt32(NrParticipanti);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (proba_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Proba);
            }
            if (NrParticipanti != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NrParticipanti);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ProbaDTO other)
        {
            if (other == null)
            {
                return;
            }
            if (other.proba_ != null)
            {
                if (proba_ == null)
                {
                    proba_ = new global::Proba();
                }
                Proba.MergeFrom(other.Proba);
            }
            if (other.NrParticipanti != 0)
            {
                NrParticipanti = other.NrParticipanti;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            if (proba_ == null)
                            {
                                proba_ = new global::Proba();
                            }
                            input.ReadMessage(proba_);
                            break;
                        }
                    case 16:
                        {
                            NrParticipanti = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class ParticipantProbeDTO : pb::IMessage<ParticipantProbeDTO>
    {
        private static readonly pb::MessageParser<ParticipantProbeDTO> _parser = new pb::MessageParser<ParticipantProbeDTO>(() => new ParticipantProbeDTO());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ParticipantProbeDTO> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Reflection.Descriptor.MessageTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParticipantProbeDTO()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParticipantProbeDTO(ParticipantProbeDTO other) : this()
        {
            Participant = other.participant_ != null ? other.Participant.Clone() : null;
            probe_ = other.probe_.Clone();
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ParticipantProbeDTO Clone()
        {
            return new ParticipantProbeDTO(this);
        }

        /// <summary>Field number for the "participant" field.</summary>
        public const int ParticipantFieldNumber = 1;
        private global::Participant participant_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Participant Participant
        {
            get { return participant_; }
            set
            {
                participant_ = value;
            }
        }

        /// <summary>Field number for the "probe" field.</summary>
        public const int ProbeFieldNumber = 2;
        private static readonly pb::FieldCodec<global::Proba> _repeated_probe_codec
            = pb::FieldCodec.ForMessage(18, global::Proba.Parser);
        private readonly pbc::RepeatedField<global::Proba> probe_ = new pbc::RepeatedField<global::Proba>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Proba> Probe
        {
            get { return probe_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as ParticipantProbeDTO);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ParticipantProbeDTO other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!object.Equals(Participant, other.Participant)) return false;
            if (!probe_.Equals(other.probe_)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (participant_ != null) hash ^= Participant.GetHashCode();
            hash ^= probe_.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (participant_ != null)
            {
                output.WriteRawTag(10);
                output.WriteMessage(Participant);
            }
            probe_.WriteTo(output, _repeated_probe_codec);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (participant_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Participant);
            }
            size += probe_.CalculateSize(_repeated_probe_codec);
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ParticipantProbeDTO other)
        {
            if (other == null)
            {
                return;
            }
            if (other.participant_ != null)
            {
                if (participant_ == null)
                {
                    participant_ = new global::Participant();
                }
                Participant.MergeFrom(other.Participant);
            }
            probe_.Add(other.probe_);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            if (participant_ == null)
                            {
                                participant_ = new global::Participant();
                            }
                            input.ReadMessage(participant_);
                            break;
                        }
                    case 18:
                        {
                            probe_.AddEntriesFrom(input, _repeated_probe_codec);
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class Participant : pb::IMessage<Participant>
    {
        private static readonly pb::MessageParser<Participant> _parser = new pb::MessageParser<Participant>(() => new Participant());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Participant> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Reflection.Descriptor.MessageTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Participant()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Participant(Participant other) : this()
        {
            id_ = other.id_;
            nume_ = other.nume_;
            varsta_ = other.varsta_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Participant Clone()
        {
            return new Participant(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id
        {
            get { return id_; }
            set
            {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "nume" field.</summary>
        public const int NumeFieldNumber = 2;
        private string nume_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Nume
        {
            get { return nume_; }
            set
            {
                nume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "varsta" field.</summary>
        public const int VarstaFieldNumber = 3;
        private int varsta_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Varsta
        {
            get { return varsta_; }
            set
            {
                varsta_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as Participant);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Participant other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Id != other.Id) return false;
            if (Nume != other.Nume) return false;
            if (Varsta != other.Varsta) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Id.Length != 0) hash ^= Id.GetHashCode();
            if (Nume.Length != 0) hash ^= Nume.GetHashCode();
            if (Varsta != 0) hash ^= Varsta.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Id.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Id);
            }
            if (Nume.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Nume);
            }
            if (Varsta != 0)
            {
                output.WriteRawTag(24);
                output.WriteInt32(Varsta);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Id.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
            }
            if (Nume.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Nume);
            }
            if (Varsta != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Varsta);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Participant other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Id.Length != 0)
            {
                Id = other.Id;
            }
            if (other.Nume.Length != 0)
            {
                Nume = other.Nume;
            }
            if (other.Varsta != 0)
            {
                Varsta = other.Varsta;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            Id = input.ReadString();
                            break;
                        }
                    case 18:
                        {
                            Nume = input.ReadString();
                            break;
                        }
                    case 24:
                        {
                            Varsta = input.ReadInt32();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class InscriereRequest : pb::IMessage<InscriereRequest>
    {
        private static readonly pb::MessageParser<InscriereRequest> _parser = new pb::MessageParser<InscriereRequest>(() => new InscriereRequest());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InscriereRequest> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Reflection.Descriptor.MessageTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InscriereRequest()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InscriereRequest(InscriereRequest other) : this()
        {
            type_ = other.type_;
            switch (other.PayloadCase)
            {
                case PayloadOneofCase.User:
                    User = other.User.Clone();
                    break;
                case PayloadOneofCase.Inscriere:
                    Inscriere = other.Inscriere.Clone();
                    break;
                case PayloadOneofCase.IdProba:
                    IdProba = other.IdProba;
                    break;
                case PayloadOneofCase.Participant:
                    Participant = other.Participant.Clone();
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InscriereRequest Clone()
        {
            return new InscriereRequest(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::InscriereRequest.Types.Type type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::InscriereRequest.Types.Type Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "user" field.</summary>
        public const int UserFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::User User
        {
            get { return payloadCase_ == PayloadOneofCase.User ? (global::User)payload_ : null; }
            set
            {
                payload_ = value;
                payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.User;
            }
        }

        /// <summary>Field number for the "inscriere" field.</summary>
        public const int InscriereFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::InscriereDTO Inscriere
        {
            get { return payloadCase_ == PayloadOneofCase.Inscriere ? (global::InscriereDTO)payload_ : null; }
            set
            {
                payload_ = value;
                payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Inscriere;
            }
        }

        /// <summary>Field number for the "idProba" field.</summary>
        public const int IdProbaFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int IdProba
        {
            get { return payloadCase_ == PayloadOneofCase.IdProba ? (int)payload_ : 0; }
            set
            {
                payload_ = value;
                payloadCase_ = PayloadOneofCase.IdProba;
            }
        }

        /// <summary>Field number for the "participant" field.</summary>
        public const int ParticipantFieldNumber = 5;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Participant Participant
        {
            get { return payloadCase_ == PayloadOneofCase.Participant ? (global::Participant)payload_ : null; }
            set
            {
                payload_ = value;
                payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Participant;
            }
        }

        private object payload_;
        /// <summary>Enum of possible cases for the "payload" oneof.</summary>
        public enum PayloadOneofCase
        {
            None = 0,
            User = 2,
            Inscriere = 3,
            IdProba = 4,
            Participant = 5,
        }
        private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PayloadOneofCase PayloadCase
        {
            get { return payloadCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPayload()
        {
            payloadCase_ = PayloadOneofCase.None;
            payload_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InscriereRequest);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InscriereRequest other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (!object.Equals(User, other.User)) return false;
            if (!object.Equals(Inscriere, other.Inscriere)) return false;
            if (IdProba != other.IdProba) return false;
            if (!object.Equals(Participant, other.Participant)) return false;
            if (PayloadCase != other.PayloadCase) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (payloadCase_ == PayloadOneofCase.User) hash ^= User.GetHashCode();
            if (payloadCase_ == PayloadOneofCase.Inscriere) hash ^= Inscriere.GetHashCode();
            if (payloadCase_ == PayloadOneofCase.IdProba) hash ^= IdProba.GetHashCode();
            if (payloadCase_ == PayloadOneofCase.Participant) hash ^= Participant.GetHashCode();
            hash ^= (int)payloadCase_;
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (payloadCase_ == PayloadOneofCase.User)
            {
                output.WriteRawTag(18);
                output.WriteMessage(User);
            }
            if (payloadCase_ == PayloadOneofCase.Inscriere)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Inscriere);
            }
            if (payloadCase_ == PayloadOneofCase.IdProba)
            {
                output.WriteRawTag(32);
                output.WriteInt32(IdProba);
            }
            if (payloadCase_ == PayloadOneofCase.Participant)
            {
                output.WriteRawTag(42);
                output.WriteMessage(Participant);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (payloadCase_ == PayloadOneofCase.User)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
            }
            if (payloadCase_ == PayloadOneofCase.Inscriere)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Inscriere);
            }
            if (payloadCase_ == PayloadOneofCase.IdProba)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdProba);
            }
            if (payloadCase_ == PayloadOneofCase.Participant)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Participant);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InscriereRequest other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            switch (other.PayloadCase)
            {
                case PayloadOneofCase.User:
                    User = other.User;
                    break;
                case PayloadOneofCase.Inscriere:
                    Inscriere = other.Inscriere;
                    break;
                case PayloadOneofCase.IdProba:
                    IdProba = other.IdProba;
                    break;
                case PayloadOneofCase.Participant:
                    Participant = other.Participant;
                    break;
            }

        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            type_ = (global::InscriereRequest.Types.Type)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            global::User subBuilder = new global::User();
                            if (payloadCase_ == PayloadOneofCase.User)
                            {
                                subBuilder.MergeFrom(User);
                            }
                            input.ReadMessage(subBuilder);
                            User = subBuilder;
                            break;
                        }
                    case 26:
                        {
                            global::InscriereDTO subBuilder = new global::InscriereDTO();
                            if (payloadCase_ == PayloadOneofCase.Inscriere)
                            {
                                subBuilder.MergeFrom(Inscriere);
                            }
                            input.ReadMessage(subBuilder);
                            Inscriere = subBuilder;
                            break;
                        }
                    case 32:
                        {
                            IdProba = input.ReadInt32();
                            break;
                        }
                    case 42:
                        {
                            global::Participant subBuilder = new global::Participant();
                            if (payloadCase_ == PayloadOneofCase.Participant)
                            {
                                subBuilder.MergeFrom(Participant);
                            }
                            input.ReadMessage(subBuilder);
                            Participant = subBuilder;
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the InscriereRequest message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Type
            {
                [pbr::OriginalName("Unkown")] Unkown = 0,
                [pbr::OriginalName("Login")] Login = 1,
                [pbr::OriginalName("Logout")] Logout = 2,
                [pbr::OriginalName("AddInscriere")] AddInscriere = 3,
                [pbr::OriginalName("GetAllProbeDto")] GetAllProbeDto = 4,
                [pbr::OriginalName("GetParticipantiDto")] GetParticipantiDto = 5,
                [pbr::OriginalName("GetParticipant")] GetParticipant = 6,
            }

        }
        #endregion

    }

    public sealed partial class InscriereResponse : pb::IMessage<InscriereResponse>
    {
        private static readonly pb::MessageParser<InscriereResponse> _parser = new pb::MessageParser<InscriereResponse>(() => new InscriereResponse());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<InscriereResponse> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Reflection.Descriptor.MessageTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InscriereResponse()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InscriereResponse(InscriereResponse other) : this()
        {
            type_ = other.type_;
            error_ = other.error_;
            probeDto_ = other.probeDto_.Clone();
            participantProbeDto_ = other.participantProbeDto_.Clone();
            exists_ = other.exists_;
            Participant = other.participant_ != null ? other.Participant.Clone() : null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public InscriereResponse Clone()
        {
            return new InscriereResponse(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::InscriereResponse.Types.Type type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::InscriereResponse.Types.Type Type
        {
            get { return type_; }
            set
            {
                type_ = value;
            }
        }

        /// <summary>Field number for the "error" field.</summary>
        public const int ErrorFieldNumber = 2;
        private string error_ = "";
        /// <summary>
        /// One of the following will be filled in, depending on the type.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Error
        {
            get { return error_; }
            set
            {
                error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "probeDto" field.</summary>
        public const int ProbeDtoFieldNumber = 3;
        private static readonly pb::FieldCodec<global::ProbaDTO> _repeated_probeDto_codec
            = pb::FieldCodec.ForMessage(26, global::ProbaDTO.Parser);
        private readonly pbc::RepeatedField<global::ProbaDTO> probeDto_ = new pbc::RepeatedField<global::ProbaDTO>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::ProbaDTO> ProbeDto
        {
            get { return probeDto_; }
        }

        /// <summary>Field number for the "participantProbeDto" field.</summary>
        public const int ParticipantProbeDtoFieldNumber = 4;
        private static readonly pb::FieldCodec<global::ParticipantProbeDTO> _repeated_participantProbeDto_codec
            = pb::FieldCodec.ForMessage(34, global::ParticipantProbeDTO.Parser);
        private readonly pbc::RepeatedField<global::ParticipantProbeDTO> participantProbeDto_ = new pbc::RepeatedField<global::ParticipantProbeDTO>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::ParticipantProbeDTO> ParticipantProbeDto
        {
            get { return participantProbeDto_; }
        }

        /// <summary>Field number for the "exists" field.</summary>
        public const int ExistsFieldNumber = 5;
        private bool exists_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Exists
        {
            get { return exists_; }
            set
            {
                exists_ = value;
            }
        }

        /// <summary>Field number for the "participant" field.</summary>
        public const int ParticipantFieldNumber = 6;
        private global::Participant participant_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Participant Participant
        {
            get { return participant_; }
            set
            {
                participant_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as InscriereResponse);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(InscriereResponse other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Type != other.Type) return false;
            if (Error != other.Error) return false;
            if (!probeDto_.Equals(other.probeDto_)) return false;
            if (!participantProbeDto_.Equals(other.participantProbeDto_)) return false;
            if (Exists != other.Exists) return false;
            if (!object.Equals(Participant, other.Participant)) return false;
            return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Type != 0) hash ^= Type.GetHashCode();
            if (Error.Length != 0) hash ^= Error.GetHashCode();
            hash ^= probeDto_.GetHashCode();
            hash ^= participantProbeDto_.GetHashCode();
            if (Exists != false) hash ^= Exists.GetHashCode();
            if (participant_ != null) hash ^= Participant.GetHashCode();
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Type != 0)
            {
                output.WriteRawTag(8);
                output.WriteEnum((int)Type);
            }
            if (Error.Length != 0)
            {
                output.WriteRawTag(18);
                output.WriteString(Error);
            }
            probeDto_.WriteTo(output, _repeated_probeDto_codec);
            participantProbeDto_.WriteTo(output, _repeated_participantProbeDto_codec);
            if (Exists != false)
            {
                output.WriteRawTag(40);
                output.WriteBool(Exists);
            }
            if (participant_ != null)
            {
                output.WriteRawTag(50);
                output.WriteMessage(Participant);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Type != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Type);
            }
            if (Error.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
            }
            size += probeDto_.CalculateSize(_repeated_probeDto_codec);
            size += participantProbeDto_.CalculateSize(_repeated_participantProbeDto_codec);
            if (Exists != false)
            {
                size += 1 + 1;
            }
            if (participant_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Participant);
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(InscriereResponse other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Type != 0)
            {
                Type = other.Type;
            }
            if (other.Error.Length != 0)
            {
                Error = other.Error;
            }
            probeDto_.Add(other.probeDto_);
            participantProbeDto_.Add(other.participantProbeDto_);
            if (other.Exists != false)
            {
                Exists = other.Exists;
            }
            if (other.participant_ != null)
            {
                if (participant_ == null)
                {
                    participant_ = new global::Participant();
                }
                Participant.MergeFrom(other.Participant);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 8:
                        {
                            type_ = (global::InscriereResponse.Types.Type)input.ReadEnum();
                            break;
                        }
                    case 18:
                        {
                            Error = input.ReadString();
                            break;
                        }
                    case 26:
                        {
                            probeDto_.AddEntriesFrom(input, _repeated_probeDto_codec);
                            break;
                        }
                    case 34:
                        {
                            participantProbeDto_.AddEntriesFrom(input, _repeated_participantProbeDto_codec);
                            break;
                        }
                    case 40:
                        {
                            Exists = input.ReadBool();
                            break;
                        }
                    case 50:
                        {
                            if (participant_ == null)
                            {
                                participant_ = new global::Participant();
                            }
                            input.ReadMessage(participant_);
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the InscriereResponse message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types
        {
            public enum Type
            {
                [pbr::OriginalName("Unknown")] Unknown = 0,
                [pbr::OriginalName("Ok")] Ok = 1,
                [pbr::OriginalName("Error")] Error = 2,
                [pbr::OriginalName("GetAllProbeDto")] GetAllProbeDto = 3,
                [pbr::OriginalName("GetParticipantiDto")] GetParticipantiDto = 4,
                [pbr::OriginalName("GetParticipant")] GetParticipant = 5,
                [pbr::OriginalName("NewInscriere")] NewInscriere = 6,
            }

        }
        #endregion

    }

    #endregion


    #endregion Designer generated code

